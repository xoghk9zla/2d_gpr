#include<GL/glut.h>
#include <math.h>
#include <stdlib.h>

#define LEFT -400
#define RIGHT 400
#define TOP 300
#define BOTTOM -300

#define NULL 0

#define TRIANGLE 456121
#define RECT 456122

///화면 컨트롤을 위한 기본 함수 선언
GLvoid drawScene(GLvoid);
GLvoid Reshape(int w, int h);
void Keyboard(unsigned char key, int x, int y);
void SetupRc();	// 필요한 변수 초기화
void TimerFunction(int value);

float TransX = 0.0, TransY = 0.0, TransZ = 0.0;
float LookX = 0.0, LookY = 0.0, LookZ = 0.0;
float SphereX = 0.0, SphereY = 0.0, SphereZ = 0.0;
float RotateX = 0.0, RotateY = 0.0, RotateZ = 0.0;
float Leap_SX = 1.0, Leap_SY = 1.0, Leap_SZ = 1.0;
float Leap_A = 0.0;
float Torus_TY = 0.0;
float Door_A = 0.0;
float Cone_SX = 1.0, Cone_SY = 1.0, Cone_SZ = 1.0;
bool Leap_S = false, UP_T = false, Cone_S = false;
bool Open_D = false;

void main(int argc, char *argv[])
{
	//초기화 함수들 
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH); // 디스플레이 모드 설정 
	glutInitWindowPosition(100, 0); //??? 윈도우의 위치지정 
	glutInitWindowSize(800, 600); // 윈도우의 크기 지정 
	glutCreateWindow("실습18"); // 윈도우 생성 (윈도우 이름) 
	SetupRc();	// 상태 변수 초기화
	glutDisplayFunc(drawScene); // 출력 함수의 지정
	glutKeyboardFunc(Keyboard);	// 키보드 입력
	glutReshapeFunc(Reshape); // 다시 그리기 함수의 지정 
	glutTimerFunc(0, TimerFunction, 0);
	glutMainLoop();
}
// 윈도우 출력 함수
GLvoid drawScene(GLvoid) {
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);	// 바탕색을 'black' 로 지정
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // 설정된 색으로 젂체를 칠하기

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glPushMatrix();

	glTranslatef(TransX, TransY, TransZ);

	glRotatef(LookX, 1.0, 0.0, 0.0);
	glRotatef(LookY, 0.0, 1.0, 0.0);
	glRotatef(LookZ, 0.0, 0.0, 1.0);

	glTranslated(0.0, -30.0, 0.0);
	// 바닥------------------------------------------
	glPushMatrix();

	glColor3f(0.0, 0.5, 1.0);

	glTranslated(0.0, -45.0, 0.0);
	glScalef(1.0, 0.2, 1.0);

	glutWireCube(200.0);

	glPopMatrix();
	// -----------------------------------------------
	// 구---------------------------------------------
	glPushMatrix();

	glColor3f(1.0, 0.5, 0.0);
	glTranslated(-50.0, -12.0, 0.0);
	glTranslatef(SphereZ, 0.0, SphereX);

	glRotatef(RotateZ * 10, 0.0, 0.0, 1.0);
	glRotatef(RotateY * 10, 0.0, 1.0, 0.0);
	glRotatef(RotateX * 10, 1.0, 0.0, 0.0);

	glutWireSphere(15, 20, 20);

	glPopMatrix();
	// ------------------------------------------------
	// 구, 나무----------------------------------------
	glPushMatrix();

	glTranslated(50.0, 0.0, -50.0);
	// 나뭇잎------------------------------------------
	glPushMatrix();

	glColor3f(0.0, 1.0, 0.0);
	glScalef(Leap_SX, Leap_SY, Leap_SZ);
	glTranslated(0.0, 25.0, 0.0);

	glutWireSphere(20, 20, 20);

	glPopMatrix();
	// ------------------------------------------------
	glColor3f(0.6, 0.0, 0.0);

	glScalef(0.25, 1.0, 0.25);

	glutWireCube(50.0);

	glPopMatrix();
	// ------------------------------------------------
	// 육면체 나무-------------------------------------
	glPushMatrix();

	glTranslated(-50.0, 0.0, -50.0);
	// 나뭇잎------------------------------------------
	glPushMatrix();

	glColor3f(0.0, 0.0, 1.0);
	glTranslated(0.0, 25.0, 0.0);
	glScalef(1.0, 0.5, 1.0);
	glRotatef(Leap_A, 0.0, 1.0, 0.0);

	glutWireCube(50.0);

	glPopMatrix();
	// ------------------------------------------------
	glScalef(0.25, 1.0, 0.25);
	glColor3f(0.6, 0.0, 0.0);
	glutWireCube(50.0);

	glPopMatrix();
	// ------------------------------------------------
	// 토러스건물--------------------------------------
	glPushMatrix();
	glTranslated(-50.0, 0.0, 50.0);
	// 토러스------------------------------------------
	glPushMatrix();

	glTranslated(0.0, Torus_TY, 0.0);
	glRotatef(90, 1.0, 0.0, 0.0);

	glutWireTorus(8.0, 16.0, 20, 20);

	glPopMatrix();
	// ------------------------------------------------
	glColor3f(0.6, 0.6, 0.6);

	glScalef(0.25, 1.0, 0.25);
	glutWireCube(50.0);
	glPopMatrix();
	// ------------------------------------------------
	// 콘----------------------------------------------
	glPushMatrix();
	glColor3f(0.3, 0.6, 0.9);
	glTranslated(50.0, -16.0, 50.0);
	glRotatef(-90, 1.0, 0.0, 0.0);
	glScalef(Cone_SX, Cone_SY, Cone_SZ);
	glutWireCone(8.0, 16.0, 20, 20);

	glPopMatrix();
	// ------------------------------------------------
	// 콘----------------------------------------------
	glPushMatrix();

	glTranslated(50.0, 16.0, 50.0);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(2.0 - Cone_SX, 2.0 - Cone_SY, 2.0 - Cone_SZ);
	glutWireCone(8.0, 16.0, 20, 20);

	glPopMatrix();
	// ------------------------------------------------
	// 중앙문------------------------------------------
	glPushMatrix();

	glTranslated(0.0, 20.0, 0.0);
	glScalef(2.0, 1.0, 0.25);

	glutWireCube(20.0);
	// 왼쪽--------------------------------------------
	glPushMatrix();

	glTranslated(-10.0, 0.0, 0.0);
	glRotatef(-Door_A, 0.0, 1.0, 0.0);

	glPushMatrix();

	glScalef(0.5, 1.0, 1.0);
	glTranslated(10.0, -30.0, 0.0);
	glScalef(1.0, 2.0, 0.25);

	glutWireCube(20.0);

	glPopMatrix();

	glPopMatrix();
	// ------------------------------------------------
	// 오른쪽------------------------------------------
	glPushMatrix();

	glTranslated(10.0, 0.0, 0.0);
	glRotatef(Door_A, 0.0, 1.0, 0.0);

	glPushMatrix();

	glScalef(0.5, 1.0, 1.0);
	glTranslated(-10.0, -30.0, 0.0);
	glScalef(1.0, 2.0, 0.25);

	glutWireCube(20.0);

	glPopMatrix();

	glPopMatrix();
	// ------------------------------------------------
	glPopMatrix();
	// ------------------------------------------------
	glPopMatrix();

	glutSwapBuffers();
}
void SetupRc() {
	TransX = 0.0, TransY = 0.0, TransZ = 0.0;
	LookX = 0.0, LookY = 0.0, LookZ = 0.0;
	SphereX = 0.0, SphereY = 0.0, SphereZ = 0.0;
	RotateX = 0.0, RotateY = 0.0, RotateZ = 0.0;
	Leap_SX = 1.0, Leap_SY = 1.0, Leap_SZ = 1.0;
	Leap_A = 0.0;
	Torus_TY = 0.0;
	Door_A = 0.0;
	Cone_SX = 1.0, Cone_SY = 1.0, Cone_SZ = 1.0;
	Leap_S = false, UP_T = false, Cone_S = false;
	Open_D = false;
}
GLvoid Reshape(int w, int h) {
	glViewport(0, 0, w, h);
	// 모델링 변환 설정: 디스플레이 콜백 함수에서 모델 변환 적용하기 위하여 Matrix mode 저장
	// 원근 투영을 사용하는 경우:
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0f, w / h, 1.0, 1000.0);
	// 관측 변환: 카메라의 위치 설정 (필요한 경우, 다른 곳에 설정 가능)
	gluLookAt(0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0);
	glPushMatrix();
	glTranslatef(0.0, 0.0, -300.0);
	glMatrixMode(GL_MODELVIEW);
}
void Keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case 'w':
	case 'W':
		TransY += 0.5;
		glutPostRedisplay();
		break;
	case 's':
	case 'S':
		TransY -= 0.5;
		glutPostRedisplay();
		break;
	case 'a':
	case 'A':
		TransX -= 0.5;
		glutPostRedisplay();
		break;
	case 'd':
	case 'D':
		TransX += 0.5;
		glutPostRedisplay();
		break;
	case '+':
		TransZ += 0.5;
		glutPostRedisplay();
		break;
	case '-':
		TransZ -= 0.5;
		glutPostRedisplay();
		break;
	case 'x':
	case 'X':
		LookX++;
		glutPostRedisplay();
		break;
	case 'y':
	case 'Y':
		LookY++;
		glutPostRedisplay();
		break;
	case 'z':
	case 'Z':
		LookZ++;
		glutPostRedisplay();
		break;
	case 'l':
		SphereZ -= 1;
		RotateZ--;
		glutPostRedisplay();
		break;
	case 'L':
		SphereZ += 1;
		RotateZ++;
		glutPostRedisplay();
		break;
	case 'm':
		SphereY -= 1;
		RotateY--;
		glutPostRedisplay();
		break;
	case 'M':
		SphereY += 1;
		RotateY++;
		glutPostRedisplay();
		break;
	case 'n':
		SphereX -= 1;
		RotateX--;
		glutPostRedisplay();
		break;
	case 'N':
		SphereX += 1;
		RotateX++;
		glutPostRedisplay();
		break;
	case 'i':
	case 'I':
		SetupRc();
		glutPostRedisplay();
		break;
	case 'q':
	case 'Q':
		exit(0);
		break;
	default:
		break;
	}
}
void TimerFunction(int value) {
	++Leap_A;
	if (Leap_S){
		Leap_SX += 0.01;
		Leap_SY += 0.01;
		Leap_SZ += 0.01;
		if (Leap_SX > 1.25 && Leap_SY > 1.25 && Leap_SZ > 1.25)
			Leap_S = false;
	}
	else{
		Leap_SX -= 0.01;
		Leap_SY -= 0.01;
		Leap_SZ -= 0.01;
		if (Leap_SX < 0.75 && Leap_SY < 0.75 && Leap_SZ < 0.75)
			Leap_S = true;
	}
	if (UP_T){
		Torus_TY += 1.0;
		if (Torus_TY > 25)
			UP_T = false;
	}
	else{
		Torus_TY -= 1.0;
		if (Torus_TY < 0)
			UP_T = true;
	}
	if (Cone_S){
		Cone_SX += 0.01;
		Cone_SY += 0.01;
		Cone_SZ += 0.01;
		if (Cone_SX > 2.0 && Cone_SY > 2.0 && Cone_SZ > 2.0)
			Cone_S = false;
	}
	else{
		Cone_SX -= 0.01;
		Cone_SY -= 0.01;
		Cone_SZ -= 0.01;
		if (Cone_SX < 0.0 && Cone_SY < 0.0 && Cone_SZ < 0.0)
			Cone_S = true;
	}
	if (Open_D){
		Door_A += 1;
		if (Door_A > 90)
			Open_D = false;
	}
	else{
		Door_A -= 1;
		if (Door_A < 0)
			Open_D = true;
	}
	glutPostRedisplay();
	glutTimerFunc(100, TimerFunction, value); // 타이머
}