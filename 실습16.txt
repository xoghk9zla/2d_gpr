#include<GL/glut.h>
#include <math.h>
#include <stdlib.h>

#define LEFT -400
#define RIGHT 400
#define TOP 300
#define BOTTOM -300

#define NULL 0
#define PIE	3.14

#define TRIANGLE 456121
#define RECT 456122
#define CIRCLE 456123
#define TEAPOT 456124

///화면 컨트롤을 위한 기본 함수 선언
GLvoid drawScene(GLvoid);
GLvoid Reshape(int w, int h);
void Keyboard(unsigned char key, int x, int y);

float RotateX_L = 0.0, RotateY_L = 0.0, RotateZ_L = 0.0;
float RotateX_R = 0.0, RotateY_R = 0.0, RotateZ_R = 0.0;
float RotateX_A = 0.0, RotateY_A = 0.0, RotateZ_A = 0.0;
float Angle_L = 0.0, Angle_R = 0.0, Angle_A = 0.0;
bool Left = false, Right = false, All = false;
int Shape = RECT;
void main(int argc, char *argv[])
{
	//초기화 함수들 
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH); // 디스플레이 모드 설정 
	glutInitWindowPosition(100, 0); //    윈도우의 위치지정 
	glutInitWindowSize(800, 600); // 윈도우의 크기 지정 
	glutCreateWindow("실습 16"); // 윈도우 생성 (윈도우 이름) 
	glutDisplayFunc(drawScene); // 출력 함수의 지정
	glutKeyboardFunc(Keyboard);		// 키보드 입력
	glutReshapeFunc(Reshape); // 다시 그리기 함수의 지정 
	glutMainLoop();
}
// 윈도우 출력 함수
GLvoid drawScene(GLvoid){
	glMatrixMode(GL_MODELVIEW);

	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);    // 바탕색을 'black' 로 지정
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // 설정된 색으로 젂체를 칠하기

	glPushMatrix();

	glTranslatef(0.0, 0.0, 0.3);
	glRotatef(Angle_A, RotateX_A, RotateY_A, RotateZ_A);

	glPushMatrix();

	// 중간 큐브
	glColor4f(0.3, 0.0, 0.7, 1.0);	// 색칠

	glScalef(1.0, 1.0, 0.1);
	glutSolidCube(2.0);

	glPopMatrix();

	// 왼쪽 큐브
	glColor4f(0.3, 1.0, 0.7, 1.0);	// 색칠
	glPushMatrix();
	glTranslatef(-0.5, 0.0, 0.35);
	glRotatef(Angle_L, RotateX_L, RotateY_L, RotateZ_L);
	if (Shape == RECT){
		glScalef(1.5, 0.5, 1.0);
		glutSolidCube(0.3);
	}
	else if (Shape == CIRCLE){
		glutSolidSphere(0.3, 10, 10);
	}
	else if (Shape == TRIANGLE){
		glutSolidCone(0.3, 0.3, 10, 10);
	}
	else if (Shape == TEAPOT){
		glRotatef(90, 1.0, 0.0, 0.0);
		glutSolidTeapot(0.3);
	}
	glPopMatrix();
	// 오른쪽 큐브
	glColor4f(1.0, 0.0, 0.7, 1.0);	// 색칠
	glPushMatrix();
	glTranslatef(0.5, 0.0, 0.35);
	glRotatef(Angle_R, RotateX_R, RotateY_R, RotateZ_R);
	if (Shape == RECT){
		glScalef(0.5, 1.5, 1.0);
		glutWireCube(0.3);
	}
	else if (Shape == CIRCLE){
		glutWireSphere(0.3, 10, 10);
	}
	else if (Shape == TRIANGLE){
		glutWireCone(0.3, 0.3, 10, 10);
	}
	else if (Shape == TEAPOT){
		glRotatef(90, 1.0, 0.0, 0.0);
		glutWireTeapot(0.3);
	}
	glPopMatrix();

	glPushMatrix();

	glTranslatef(0.0, 0.0, 0.5);

	glColor4f(1.0, 0.0, 0.0, 1.0);	// 색칠
	glBegin(GL_LINES);
	glVertex3f(0.0, 0.0, 0.0);
	glVertex3f(0.3, 0.0, 0.0);
	glEnd();
	glColor4f(0.0, 1.0, 0.0, 1.0);	// 색칠
	glBegin(GL_LINES);
	glVertex3f(0.0, 0.0, 0.0);
	glVertex3f(0.0, 0.3, 0.0);
	glEnd();
	glColor4f(0.0, 0.0, 1.0, 1.0);	// 색칠
	glBegin(GL_LINES);
	glVertex3f(0.0, 0.0, 0.0);
	glVertex3f(0.0, 0.0, 0.3);
	glEnd();

	glPopMatrix();

	glPopMatrix();

	glutSwapBuffers();
}
GLvoid Reshape(int w, int h){
	glViewport(0, 0, w, h);
	// 모델링 변환 설정: 디스플레이 콜백 함수에서 모델 변환 적용하기 위하여 Matrix mode 저장
	// 원근 투영을 사용하는 경우:
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluPerspective(60.0f, w / h, 1.0, 1000.0);

	// 관측 변환: 카메라의 위치 설정 (필요한 경우, 다른 곳에 설정 가능)
	gluLookAt(0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0);

	glPushMatrix();
	glTranslatef(0.0, 0.0, -3.0);

}
void Keyboard(unsigned char key, int x, int y){
	switch (key){
	case 'l':
	case 'L':
		Left = true;
		Right = false;
		All = false;
		glutPostRedisplay();
		break;
	case 'r':
	case 'R':
		Left = false;
		Right = true;
		All = false;
		glutPostRedisplay();
		break;
	case 'c':
	case 'C':
		if (Shape == RECT)
			Shape = CIRCLE;
		else if (Shape == CIRCLE)
			Shape = TRIANGLE;
		else if (Shape == TRIANGLE)
			Shape = TEAPOT;
		else if (Shape == TEAPOT)
			Shape = RECT;
		glutPostRedisplay();
		break;
	case 'a':
	case 'A':
		Left = false;
		Right = false;
		All = true;
		glutPostRedisplay();
		break;
	case 'x':
	case 'X':
		if (Left == true){
			if (RotateX_L != 1.0)
				Angle_L = 0.0;
			RotateX_L = 1.0;
			RotateY_L = 0.0;
			RotateZ_L = 0.0;
			++Angle_L;
		}
		else if (Right == true){
			if (RotateX_R != 1.0)
				Angle_R = 0.0;
			RotateX_R = 1.0;
			RotateY_R = 0.0;
			RotateZ_R = 0.0;
			++Angle_R;
		}
		else if (All == true){
			if (RotateX_A != 1.0)
				Angle_A = 0.0;
			RotateX_A = 1.0;
			RotateY_A = 0.0;
			RotateZ_A = 0.0;
			++Angle_A;
		}
		glutPostRedisplay();
		break;
	case 'y':
	case 'Y':
		if (Left == true){
			if (RotateY_L != 1.0)
				Angle_L = 0.0;
			RotateX_L = 0.0;
			RotateY_L = 1.0;
			RotateZ_L = 0.0;
			++Angle_L;
		}
		else if (Right == true){
			if (RotateY_R != 1.0)
				Angle_R = 0.0;
			RotateX_R = 0.0;
			RotateY_R = 1.0;
			RotateZ_R = 0.0;
			++Angle_R;
		}
		else if (All == true){
			if (RotateY_A != 1.0)
				Angle_A = 0.0;
			RotateX_A = 0.0;
			RotateY_A = 1.0;
			RotateZ_A = 0.0;
			++Angle_A;
		}
		glutPostRedisplay();
		break;
	case 'z':
	case 'Z':
		if (Left == true){
			if (RotateZ_L != 1.0)
				Angle_L = 0.0;
			RotateX_L = 0.0;
			RotateY_L = 0.0;
			RotateZ_L = 1.0;
			++Angle_L;
		}
		else if (Right == true){
			if (RotateZ_R != 1.0)
				Angle_R = 0.0;
			RotateX_R = 0.0;
			RotateY_R = 0.0;
			RotateZ_R = 1.0;
			++Angle_R;
		}
		else if (All == true){
			if (RotateZ_A != 1.0)
				Angle_A = 0.0;
			RotateX_A = 0.0;
			RotateY_A = 0.0;
			RotateZ_A = 1.0;
			++Angle_A;
		}
		glutPostRedisplay();
		break;
	case 'q':
	case 'Q':
		exit(0);
		break;
	default:
		break;
	}
}